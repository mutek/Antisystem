<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">


        <title>Antisystem by mutek</title>
        <subtitle>)_(</subtitle>
        <link href="http://mutek.github.io/Antisystem/atom.xml" rel="self" />
        <link href="http://mutek.github.io/Antisystem" />
        <!-- id>urn:uuid:60a76c80-d399-11d9-b91C-0003939e0af6</id -->
        <updated>2013-03-21T17:03:57Z</updated>
	<author>
	  <name>mutek</name>
	  <email>mutek@riseup.net</email>
	  <uri>http://mutek.github.io/Antisystem</uri>
	</author>
        <rights>(c) mutek - Public Domain</rights>
<entry>
    <title>No Login</title>
    <link href="http://mutek.github.io/Antisystem/#No Login"/>
    <!-- id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id -->
    <updated>2013-10-21T17:03:12Z</updated>
    <summary>
una debole procedura per accreditare una mail in un profilo di memoria

1) landing page alla registrazione
2) inserisci solo la mail</summary>
    <content>

</br>una debole procedura per accreditare una mail in un profilo di memoria</br></br>1) landing page alla registrazione</br>2) inserisci solo la mail</br>3) apri la tua mailbox e ricevi un PIN momentaneo</br>4) torna al sito ed inserisci la mail ed il PIN</br>5) profilo creato ed attivo per "X" minuti soluzione risolta con la sessione</br></br>futuri login post registrazione profilo</br></br>1) landing page login</br>2) inserisci email premi invio</br>3) apri la tua mailbox ricevi il messaggio di PIN momentaneo</br>4) torna alla pagina di login ed inserisci mail + pin</br>5) naviga nel sito con la sessione attiva</br></br>le sessioni si attivano tramite il PIN ricevuto nella mailbox registrata</br>
</content></entry>
<entry>
    <title>Post SQL</title>
    <link href="http://mutek.github.io/Antisystem/#Post SQL"/>
    <!-- id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id -->
    <updated>2013-10-16T16:18:38Z</updated>
    <summary>dal punto di vista datacentrico un post Ë un aggregato di informazioni multimediali caratterizzabile dai seguenti metadati

post (
uuid
contenuto</summary>
    <content>

dal punto di vista datacentrico un post Ë un aggregato di informazioni multimediali caratterizzabile dai seguenti metadati</br></br>post (</br>uuid</br>contenuto</br>timestamp</br>mittente</br>destinatario</br>graph</br>sha512sum</br>)</br></br>uuid: id unico uuid basato su una generazione che comprende /dev/urandom o simili</br>contenuto: il contenuto </br>timestamp: epoca unix di generazione (identificando generazione come store nel DB)</br>mittente: tag di un mittente verificato</br>destinatario: tag di un destinatario verificato</br>graph: indirizzo della rete del thread nel formato root.ramo.ramo.ramo....foglia</br>sha512sum: sha512sum della concatenazione di tutti i campi precedenti</br></br>In pratica con la premessa che l'informazione esiste a priori, possiamo pubblicare un contenuto e strutturarlo come un oggetto autonomo e distinguibile dell'insieme degli oggetti avente poi alemno un serie di attributi</br>Gli attributi permettono di classificare l'oggetto attribuendogli caratteristiche utili ai fini della fruizione umana.</br></br>L'attributo sha512sum permette di costruire un'impronta univoca che rappresenta univocamente quella combinazione di attributi a rappresentare proprio quell'oggetto, permettendo anche di verificarne la mappatura.</br>Qualsiasi modifica ad uno dei bit della sequenza concatenata non produce quell'impronta dichiarata come ultimo attributo.</br></br>Tramite il grafo possiamo posizionare l'oggetto all'interno di una rete gerarchica e poter visualizzare in modo strutturato e fruibile l'informazione fornendo un senso al routing generato.</br>Questo effetto per avere senso deve essere mappato all'origine da parte del mittente (esempio un reply ad un post di un thread).</br></br>Il destinatario potrebbe essere la root del grafo (il main thread stesso) o un altro utente specifico (configurando ad esempio insiemi separati)</br></br>Con questa architettura siamo in grado di popolare un database ed allo stesso tempo fornire informazioni strutturate in modo variabilmente complesse che possono avere senso sia al produttore che al consumatore nello stesso momento.</br></br>prototipo rozzo pseudo SQL da implementare nel DB destinatario con la grammatica finale (i.e. PostgreSQL)</br></br><pre></br><code></br>CREATE TABLE Post </br>(uuid char(50) NOT NULL UNIQUE, </br>contenuto varchar(50) NOT NULL, </br>timestamp datetime NOT NULL, </br>mittente char(50) NOT NULL, </br>destinatario char(50), </br>grafo varchar(50) NOT NULL UNIQUE,</br>sha512sum char(50) NOT NULL UNIQUE</br>PRIMARY KEY (uuid,sha512sum));</br></code></br></pre>
</content></entry>
<entry>
    <title>TO DO</title>
    <link href="http://mutek.github.io/Antisystem/#TO DO"/>
    <!-- id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id -->
    <updated>2013-10-10T12:20:06Z</updated>
    <summary><p>un todo generico qualunque aggiornabile quandocinalmente</p>
<ul>
<li>PP IT: soluzione completa chiavi in mano server di posta + accesso webmail ad uso interno funzioni dei Pirati</li>
<li><ul>
<li><ul></summary>
    <content>

<p>un todo generico qualunque aggiornabile quandocinalmente</p></br><ul></br><li>PP IT: soluzione completa chiavi in mano server di posta + accesso webmail ad uso interno funzioni dei Pirati</li></br><li><ul></br><li><ul></br><li><ul></br><li>vps in area simpatica (Islanda?) + Debian 7 || OpenBSD + Postfix + Rouncube + amenita varie e cosmesi</li></br></ul></li></br></ul></li></br></ul></li></br><li>PP IT: aliasing email in ricezione per gestione privacy interna intra Pirati</li></br><li><ul></br><li><ul></br><li><ul></br><li>risolvere con macchina di turing in crimson e push git via ssh con chiavi in utente sandboxed</li></br></ul></li></br></ul></li></br></ul></li></br></ul>
</content></entry>
<entry>
    <title>Ed Atom Fu</title>
    <link href="http://mutek.github.io/Antisystem/#Ed Atom Fu"/>
    <!-- id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id -->
    <updated>2013-10-08T17:12:36Z</updated>
    <summary>Preso dalla foga ho integrato un timidissimo Atom che si trova presso http://mutek.github.io/Antisystem/atom.xml da verificare meglio
Al momento devo solo risolvere elegantemente la generazione dell'uuid che sia coerente con le aspettative senza dovermi installare uuidgen
L'entry contiene sia il ctime del file e quindi √® coerente con la pubblicazione nell'index sia il summary prelevando le prime 5 righe del post e sia il contenuto totale del post dopo essere stato parserizzato per l'index
Gli affinamenti li delego al futuro...gia cosi √® pi√π di quanto i serve</summary>
    <content>

Preso dalla foga ho integrato un timidissimo Atom che si trova presso <a href="http://mutek.github.io/Antisystem/atom.xml">http://mutek.github.io/Antisystem/atom.xml</a>  da verificare meglio</br>Al momento devo solo risolvere elegantemente la generazione dell'uuid che sia coerente con le aspettative senza dovermi installare uuidgen</br>L'entry contiene sia il ctime del file e quindi √® coerente con la pubblicazione nell'index sia il summary prelevando le prime 5 righe del post e sia il contenuto totale del post dopo essere stato parserizzato per l'index</br>Gli affinamenti li delego al futuro...gia cosi √® pi√π di quanto i serve</br></br>TODO:</br>per tutti gli altri formati taglia la testa al toro con pandoc senza girarci intorno</br>...</br>ok lo faro...</content></entry>
<entry>
    <title>Il Primo Titolo Automatico</title>
    <link href="http://mutek.github.io/Antisystem/#Il Primo Titolo Automatico"/>
    <!-- id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id -->
    <updated>2013-10-08T15:48:33Z</updated>
    <summary>Dopo anni passati a subire tutto il riciclo ecologico del software per costruire siti in automatico...ho deciso che non c'√® una cosa che fa per me.

Quello che fa per me √® less then suckless ovvero suckless - 1

Il minimalismo dopo il quale la pagina te la scrivi a mano libera...</summary>
    <content>

Dopo anni passati a subire tutto il riciclo ecologico del software per costruire siti in automatico...ho deciso che non c'√® una cosa che fa per me.</br></br>Quello che fa per me √® less then suckless ovvero suckless - 1</br></br>Il minimalismo dopo il quale la pagina te la scrivi a mano libera...</br></br>Ad esempio in questo momento sto usando nano per scrivere questo testo dentro un file il quale nome dovra risultare il titolo del post...</br>Pi√π semplice di cosi si muore...</br></br>Per ulteriore semplicita il titolo del file se contiene degli underscore indica la volonta di uno spazio e rimane cosi essenziale e minimalista.</br></br>Posso sfruttare l'HTML in questo post e questo verra incorporato direttamente nella index.html</br></br>esempio:</br></br><pre></br><code></br>questo testo teoricamente risulterebbe come codice in base alle regole di css</br></code></br></pre></br></br>o anche inserire link di qualche genere <a href="http://www.riseup.net">http://www.riseup.net</a>  Riseup!</br></br>Vediamo di inserire qualche tag magico giusto per rendere ancora piu pulito il file testo...ma poche cose...
</content></entry>
<entry>
    <title>Aggiornamento Compilatore Statico</title>
    <link href="http://mutek.github.io/Antisystem/#Aggiornamento Compilatore Statico"/>
    <!-- id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id -->
    <updated>2013-10-08T15:06:34Z</updated>
    <summary>Ho aggiunto la compilazione come trigger al commit di git prima di pubblicare.

Questo ha come effetto quello di rendere ancora pi√π banale l'usabilita che si riduce alle seguenti azioni:
1) Creare un post da pubblicare in un file testo dentro la cartella source
2) Eseguire git per pubblicare il contenuto</summary>
    <content>

Ho aggiunto la compilazione come trigger al commit di git prima di pubblicare.</br></br>Questo ha come effetto quello di rendere ancora pi√π banale l'usabilita che si riduce alle seguenti azioni:</br>1) Creare un post da pubblicare in un file testo dentro la cartella source</br>2) Eseguire git per pubblicare il contenuto</br></br>FINE. (a prova di programmatore VisualBasic su Macro Excel)</br></br>p.s. appena possibile trasformo automaticamente gli <pre><code>/n</code></pre> in <pre><code>&lt;/br&gt;</code></pre> e rendo le cose pi√π intuitive</br>edit: ho fatto prima a farlo che a scrivere e rieditare questo post...</br>edit: prossimo passo integrare nativamente atom.xml nella root dell'index</br>todo: la prima riga del post puo essere il sottotitolo identificando quindi una struttura del tipo:</br> - Nome file -&gt; Titolo post</br> - - Prima riga post -&gt; Sottotitolo post
</content></entry>
<entry>
    <title>Il Secondo Titolo Automatico</title>
    <link href="http://mutek.github.io/Antisystem/#Il Secondo Titolo Automatico"/>
    <!-- id>urn:uuid:1225c695-cfb8-4ebb-aaaa-80da344efa6a</id -->
    <updated>2013-10-08T10:23:37Z</updated>
    <summary>chiaramente dopo il primo test si passa al secondo.

In questo caso sto verificando che in base a questo css se continuo  scrivere cosi...risulta tutto incollato
<p>Ma inserendo tutto in paragrafi le cose dovrebbero migliorare</p></summary>
    <content>

chiaramente dopo il primo test si passa al secondo.</br></br>In questo caso sto verificando che in base a questo css se continuo  scrivere cosi...risulta tutto incollato</br><p>Ma inserendo tutto in paragrafi le cose dovrebbero migliorare</p></br></br>Come dicevo prima la semplicita di questo metodo mi permette di clonare con git in locale, poi compilare con la POSIX Shell e spingere i cambiamenti in remoto.</br>Non richiede framework esoterici tipo Ruby/Python/Vattelapiglianderculo...niente di tutto cio</br><p>Una semplice cartella di sorgenti testuale che vengono ricompilati in un index</p></br>Beh chiaramente pina piano che allungo il brodo comincio ad affinare...tipo far riconoscere sottocartelle per generare sezioni automatiche ed amenita del genere...</br>Tutto basato sullo stile UNIX...tutto √® un file...</br></br><p>edit: posso anche liberamente sbagliare quindi andare a modificare il mio file testo, ricompilare e poi git push vari</p>
</content></entry>

</feed>